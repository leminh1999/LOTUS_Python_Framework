# Generated by Selenium IDE
import __init
import time
import json
from Conf.loggingSetup import *
import undetected_chromedriver as webdriver #pip install undetected-chromedriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.remote.webelement import WebElement
from selenium.common.exceptions import NoSuchElementException
from selenium.common.exceptions import TimeoutException
from Library.A2_LOTUS.Components.LotusLib import LotusLib


########################################################
### Web test:             http://omayo.blogspot.com/
### Web Command tutorial: https://www.qafox.com/new-selenium-ide-commands-selenese/
########################################################

# from selenium.webdriver.common.print_page_options import *

class seleniumIDE ():
  exitOnExceptionFlg = True #Khi gặp exception sẽ Exit
  defaultWaitTimeMs = "30000" #Default timeout of Wait For commands in ms
  vars = {}
  printOutEna = True
  printOutLevel = "Debug" #8 levels: Fatal/Error/Warn/Info/Debug/Trace/Terminal/NoPrint
  commandNum = 0          #Counter of Selenium commands
  browserTabList = []     #List of browser tab name. Call refreshBrowserTabInfo to update.
  browserTabHandle = []   #List of browser tab handle name. Call refreshBrowserTabInfo to update.
  browserTabNum = 0       #Number of browser tab. Call refreshBrowserTabInfo to update.
  reqWaitCmdFlg = False   #Cờ yêu cầu lệnh tiếp theo là một lệnh chờ (Sau một lệnh action).
  
  def __init__(self):
    return

  def openWebForDebug (self):
    self.driver.get("http://omayo.blogspot.com/")
    # self.driver.get("https://www.qafox.com/new-selenium-ide-commands-selenese/")
    self.driver.set_window_size(800, 800)
    
  def begin(self,browserChromeOrFirefox = 'Chrome',userProfilePath="",headless=False,antiCaptcha=False,incognitoMode=False):
    '''=================================================================
    + Name: begin.
    + Function: Khai báo cấu hình cho trình duyệt dạng Chrome/Firefox dạng Head/Headless.
    + Parameter:
      - browserChromeOrFirefox: "Chrome" (default) hoặc "Firefox". 
      - headless:
        1. True: chạy ẩn.
        2. False: Chạy Browser thấy được (default).
    + Ex:
        1. IDE.setup.begin("Chrome",headless=False,antiCaptcha=False).
        2. IDE.setup.begin("Firefox",headless=True,antiCaptcha=False).\n
    ================================================================='''
    if browserChromeOrFirefox == 'Chrome':
      options = webdriver.ChromeOptions()
      # options.add_argument('disable-infobars')
      options.add_argument('--disable-infobars')
      options.add_argument('--no-sandbox') # Bypass OS security model
      if userProfilePath == "":
        pass
      else:
        options.add_argument("user-data-dir="+userProfilePath) # User Profile. Ex: /root/.config/google-chrome
      options.add_argument('--disable-gpu')  # applicable to windows os only
      if incognitoMode == True: options.add_argument("--incognito")
      # options.add_argument('--disable-dev-shm-usage') # overcome limited resource problems
      # options.add_argument('start-maximized') #
      # options.add_experimental_option('excludeSwitches', ['enable-logging'])
      # options.add_argument("--disable-extensions")
      #Setting for window print pdf -> Store in /Downloads
      settings = {
            "recentDestinations": [{
                  "id": "Save as PDF",
              }],
              "selectedDestinationId": "Save as PDF",
              "version": 2
          }
      prefs = {'printing.print_preview_sticky_settings.appState': json.dumps(settings)}
      options.add_experimental_option('prefs', prefs)
      options.add_argument('--kiosk-printing')
      
      if antiCaptcha == True: options.add_extension('Library/A3_Selenium/Components/Jubei_Captcha_Auth.zip')
      if headless == True: options.add_argument("--headless") # Runs Chrome in headless mode.
      
      # self.driver = webdriver.Chrome('chromedriver.exe',options=options) #Window chromedriver
      self.driver = webdriver.Chrome(options=options) #Linux chromedriver in /usr/local/bin/chromedriver
       
    else:
      options = webdriver.FirefoxOptions()
      options.add_argument('--no-sandbox') # Bypass OS security model
      options.add_argument('--disable-gpu')  # applicable to windows os only
      options.add_argument('start-maximized') #
      options.add_argument("--disable-extensions")
      #Setting for window print pdf -> Store in /Downloads
      settings = {
            "recentDestinations": [{
                  "id": "Save as PDF",
                  "origin": "local",
                  "account": "",
              }],
              "selectedDestinationId": "Save as PDF",
              "version": 2
          }
      prefs = {'printing.print_preview_sticky_settings.appState': json.dumps(settings)}
      options.add_experimental_option('prefs', prefs)
      options.add_argument('--kiosk-printing')
      
      if antiCaptcha == True: options.add_extension('Library/A3_Selenium/Components/Jubei_Captcha_Auth.zip')
      if headless == True: options.add_argument("--headless") # Runs Chrome in headless mode.
      
      self.driver = webdriver.Firefox(options=options)

    self.wait = WebDriverWait(self.driver, 20, poll_frequency=1,
                              ignored_exceptions=[])
    self.vars = {
      "url":"https://www.tiktok.com/@promise0069/video/7000222710496234778",
      "downloadPath":"D:\\"
                 }

  def quit(self):
    self.driver.quit()
  
  ###################################################################
  # 1. Assert/Verify                                                #
  ################################################################### 
  ###################################
  ### 1.1 assertTitle/verifyTitle ###
  ###################################
  def assertTitle(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: assertTitle
    + Function: Kiểm tra title của trang hiện tại có chứa một phần chuổi string của target hay không?
    + Parameter:
      - target: Chuổi string của title cần kiểm tra. Có thể là một phần của title.
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-title-command-for-checking-the-title-of-the-page/
    + Example:
      - assertTitle("VnExpres - Báo Tiếng Việt Nhiều Người Xem Nhất","","Đây là full title") -> True
      - assertTitle("Báo Tiếng Vi","","Đây là một phần title") -> True\n
    + PIC: PIC/1.1.assertTitle.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertTitle" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      assert target in self.driver.title
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  def verifyTitle(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: verifyTitle
    + Function: The purpose of verify title command in Selenium IDE, is to check the title of the current page.
    + Parameter:
      - target: Target title name (accept contains title name)
      - value: None
      - description: Description will be printed out
    + Return: True/False
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-title-command/
    + Example:
      - checkVerification = verifyTitle("VnExpres - Báo Tiếng Việt Nhiều Người Xem Nhất","","Hello. This is description") -> True
      - checkVerification = verifyTitle("Báo Tiếng Vi","","Hello. This is description") -> True\n
    ================================================================='''
    #Print command and description
    commandName = "verifyTitle" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    verifyStatus = target in self.driver.title
    print("Verify result: "+str(verifyStatus))
    return verifyStatus

  ###################################
  ### 1.2 assertVar/verifyVar     ###
  ###################################
  def assertVar(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: assertVar
    + Function: Kiểm tra giá trị của biên self.vars["<tên biến>"] = <value> được lưu trong class ở dạng dictionary.
    + Parameter:
      - target: Tên biến là đối số thứ nhất của dictionary self.vars[] cần kiểm tra.
      - value: Giá trị value của biến cần so sánh.
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-command/
    + Example:
      - assertVar("url","https://google.com","Đây là biến dictionary của biến url") -> True nếu biển url đang thật sự chứa "https://google.com"\n
    + PIC: PIC/1.2.assertVar.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertVar" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      assert self.vars["{}".format(target)] == value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyVar(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: verifyVar
    + Function: The purpose of the verify command is to check the value stored in a variable is according to the expected result.
    + Parameter:
      - target: Tên biến là đối số thứ nhất của dictionary self.vars[] cần kiểm tra.
      - value: Giá trị value của biến cần so sánh.
      - description: Description will be printed out
    + Return: True/False
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-command/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyVar" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      verifyStatus = self.vars["{}".format(target)] == value
      print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.error("CAN'T FIND ELEMENT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###################################
  ### 1.3 assertValue/verifyValue ###
  ###################################
  def assertValue(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertValue
    + Function: Kiểm tra thuộc tính value của một đối tượng element nào đó.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Giá trị value của element cần so sánh.
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-value-command/
    + Example: chrome.assertValue("xpath=//input[@class='gsc-search-button']","Search","JUBEI COMMENT")\n
    + PIC: PIC/1.3.assertValue.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      elementValue = element.get_attribute("value")
      assert elementValue == value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyValue(self, target="",value="",description="ABCD",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyValue
    + Function: The purpose of verify value command in Selenium IDE, is to check that the value attribute value of the given UI element.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Giá trị value của element cần so sánh.
      - description: Description will be printed out
    + Return: True/False - Return None nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-value-command/
    + Example: checkVerification = chrome.verifyValue("xpath=//input[@class='gsc-search-button']","Search","JUBEI COMMENT")\n
    ================================================================='''
    # print("Element:",element)
    # print("Target:",target)
    # print("Value:",value)
    # print("Des:",description)
    # print("PrintCMD:",printCmd)
    #Print command and description
    commandName = "verifyValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return None
      elementValue = element.get_attribute("value")
      verifyStatus = elementValue == value
      print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.error("CAN'T FIND ELEMENT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  ###################################
  ### 1.4 assertText/verifyText   ###
  ###################################
  def assertText(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertText
    + Function: Kiểm tra xem đối tượng element có chứa text hay một phần text được đề cập đến hay không.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Nội dung text của element cần so sánh (accept contains text value)
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-text-command-to-check-the-text-on-the-ui-element/
    + Example:
      - chrome.assertText("xpath=//input[@class='gsc-search-button']","Search","Nội dung của nút search là 'Search'")\n
    + PIC: PIC/1.4.assertText.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      elementText = element.text
      assert value in elementText
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyText(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyText
    + Function: The purpose of verify text command in Selenium IDE, is to check the text on the UI element (i.e. The text between the HTML tags of the located UI element)
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Nội dung text của element cần so sánh (accept contains text value)
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-text-command-to-check-the-text-on-the-ui-element/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      elementText = element.text
      verifyStatus = value in elementText
      print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #######################################
  ### 1.5 assertNotText/verifyNotText ###
  #######################################
  def assertNotText(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertNotText
    + Function: The purpose of assert not text command in Selenium IDE, is to check that the given text is not available on the UI element. (i.e. The text between the HTML tags of the located UI element)
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Nội dung text của element cần so sánh (accept contains text value)
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-not-text-command/ 
    + PIC: PIC/1.5.assertNotText.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertNotText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      elementText = element.text
      assert value not in elementText
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyNotText(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyNotText
    + Function: The purpose of verify not text command in Selenium IDE, is to check that the given text is not available on the UI element. (i.e. The text between the HTML tags of the located UI element)
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Nội dung text của element cần so sánh (accept contains text value)
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-not-text-command/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyNotText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      elementText = element.text
      verifyStatus = value not in elementText
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###################################################
  ### 1.6 assertSelectedLabel/verifySelectedLabel ###
  ###################################################
  def assertSelectedLabel(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertSelectedLabel
    + Function: Kiểm tra xem nhãn label (phần text) của option `ĐANG ĐƯỢC CHỌN` trong danh sách dropdown có chứa một phần của chuổi target hay không?
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Tên label cần so sánh (KHÔNG HỖ TRỢ CONTAINS LABEL).
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-selected-label-command-for-checking-the-selected-dropdown-option/ 
    + Example:
      - assertSelectedLabel("//select[@id='drop1']","Newsletters") //Kiểm tra option được chọn trong dropbox (id="drop1") có chứa cụm từ "Newsletters" không?
    + PIC: PIC/1.6.assertSelectedLabel.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertSelectedLabel" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      locator = "option[@value='{}']".format(element.get_attribute("value"))
      selected_text = element.find_element(By.XPATH,locator).text
      assert selected_text == value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifySelectedLabel(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifySelectedLabel
    + Function: The purpose of verify selected label command in Selenium IDE, is to check whether the given option is selected in the dropdown field using its label text or display text.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Tên label cần so sánh (KHÔNG HỖ TRỢ CONTAINS LABEL).
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-selected-label-command-for-checking-the-selected-dropdown-option/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifySelectedLabel" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      locator = "option[@value='{}']".format(element.get_attribute("value"))
      selected_text = element.find_element(By.XPATH,locator).text
      verifyStatus = selected_text == value
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###################################################
  ### 1.7 assertSelectedValue/verifySelectedValue ###
  ###################################################
  def assertSelectedValue(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertSelectedValue
    + Function: Kiểm tra xem `value` của option `ĐANG ĐƯỢC CHỌN` (Không phải text - label)  trong danh sách dropdown có chứa một phần của chuổi target hay không?
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: value của option cần so sánh
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-selected-value-command-for-checking-the-selected-dropdown-option/ 
    + PIC: PIC/1.7.assertSelectedValue.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertSelectedValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      elementValue = element.get_attribute("value")
      assert elementValue == value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifySelectedValue(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifySelectedValue
    + Function: The purpose of verify selected value command in Selenium IDE, is to check whether the given option is selected in the dropdown field.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: value của option cần so sánh
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-selected-value-command-for-checking-the-selected-dropdown-option/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifySelectedValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      elementValue = element.get_attribute("value")
      verifyStatus = elementValue == value
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  #########################################################
  ### 1.8 assertNotSelectedValue/verifyNotSelectedValue ###
  #########################################################
  def assertNotSelectedValue(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertNotSelectedValue
    + Function: The purpose of assert not selected value command in Selenium IDE, is to check whether the given option is not in the selected state in dropdown field.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: value của option cần so sánh
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-not-selected-value-command-for-checking-that-an-option-is-not-selected-in-dropdown-field/ 
    + PIC: PIC/1.8.assertNotSelectedValue.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertNotSelectedValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      elementValue = element.get_attribute("value")
      assert elementValue != value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyNotSelectedValue(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyNotSelectedValue
    + Function: The purpose of verify not selected value command in Selenium IDE, is to check whether the given option is not in the selected state in dropdown field.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: value của option cần so sánh
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-not-selected-value-command-for-checking-that-an-option-is-not-selected-in-dropdown-field/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyNotSelectedValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      elementValue = element.get_attribute("value")
      verifyStatus = elementValue != value
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  #######################################
  ### 1.9 assertChecked/verifyChecked ###
  #######################################
  def assertChecked(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertChecked
    + Function: Trỏ đến element là dạng checkbox/Radio. Xem nó có đang được check hay không.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-checked-command-to-check-whether-the-checkbox-option-is-selected/ 
    + PIC: PIC/1.9.assertChecked.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertChecked" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      assert element.is_selected() is True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyChecked(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyChecked
    + Function: The purpose of verify checked command in Selenium IDE, is to check whether the given checkbox is in the selected state.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-checked-command-to-check-whether-the-checkbox-option-is-selected/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyChecked" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      verifyStatus = element.is_selected() is True
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  ##############################################
  ### 1.10 assertNotChecked/verifyNotChecked ###
  ##############################################
  def assertNotChecked(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertNotChecked
    + Function: The purpose of assert not checked command in Selenium IDE, is to check whether the given checkbox option is not selected.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-not-checked-command-to-check-the-checkbox-option-is-not-selected/ 
    + PIC: PIC/1.10.assertNotChecked.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertNotChecked" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      assert element.is_selected() is False
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyNotChecked(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyNotChecked
    + Function: The purpose of verify not checked command in Selenium IDE, is to check whether the given checkbox option is not selected.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-not-checked-command-to-check-the-checkbox-option-is-not-selected/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyNotChecked" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      verifyStatus = element.is_selected() is False
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ##########################################
  ### 1.11 assertEditable/verifyEditable ###
  ##########################################
  def assertEditable(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertEditable
    + Function: Kiểm tra xem element có thể được chỉnh sửa được hay không.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-editable-command-to-check-whether-the-target-field-is-editable/ 
    + PIC: PIC/1.11.assertEditable.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertEditable" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      assert element.is_enable() is True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyEditable(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyEditable
    + Function: The purpose of verify editable command in Selenium IDE, is to check whether the given field is in an editable state.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-editable-command-to-check-whether-the-target-field-is-editable/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyEditable" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      verifyStatus = element.is_enable() is True
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ################################################
  ### 1.12 assertNotEditable/verifyNotEditable ###
  ################################################
  def assertNotEditable(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertNotEditable
    + Function: The purpose of assert not editable command in Selenium IDE, is to check whether the given field is in a non-editable state.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-not-editable-command-to-check-whether-the-target-field-is-non-editable/ 
    + PIC: PIC/1.12.assertNotEditable.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertNotEditable" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      assert element.is_enable() is False
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyNotEditable(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyNotEditable
    + Function: The purpose of verify not editable command in Selenium IDE, is to check whether the given field is in an editable state.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: True/False nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-not-editable-command-to-check-whether-the-target-field-is-not-editable/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyNotEditable" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return False
      verifyStatus = element.is_enable() is False
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #######################################################
  ### 1.13 assertElementPresent/verifyElementPresent  ###
  #######################################################
  def assertElementPresent(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertElementPresent
    + Function: Kiểm tra một thành phần nào đó có đang tồn tại trên page hay không?
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-element-present-command-to-check-the-ui-element-is-present-on-the-page/ 
    + PIC: PIC/1.13.assertElementPresent.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertElementPresent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)

      assert len(elements) > 0
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyElementPresent(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyElementPresent
    + Function: The purpose of verify element present command in Selenium IDE, is to check whether the given UI  element is present on the page.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: True/False
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-element-present-command-to-check-the-ui-element-is-present-on-the-page/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyElementPresent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)
      if (len(elements) == 0): return False
      verifyStatus = len(elements) > 0
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #############################################################
  ### 1.14 assertElementNotPresent/verifyElementNotPresent  ###
  #############################################################
  def assertElementNotPresent(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ assertElementNotPresent
    + Function: The purpose of assert element not present command in Selenium IDE, is to check whether the given UI  element is not present on the page.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-element-not-present-command-to-check-the-ui-element-is-not-present-on-the-page/ \n
    ================================================================='''
    #Print command and description
    commandName = "assertElementNotPresent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)
      assert len(elements) > 0
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def verifyElementNotPresent(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ verifyElementNotPresent
    + Function: The purpose of verify element not present command in Selenium IDE, is to check whether the given UI  element is not present on the page.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: True/False
    + Ref: https://www.qafox.com/new-selenium-ide-using-verify-element-not-present-command-to-check-the-ui-element-is-not-present-on-the-page/ \n
    ================================================================='''
    #Print command and description
    commandName = "verifyElementNotPresent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)
      if (len(elements) == 0): return False
      verifyStatus = len(elements) > 0
      # print("Verify result: "+str(verifyStatus))
      return verifyStatus
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 1.15 assertAlert             ###
  ####################################
  def assertAlert(self,target="",value=None,description="",printCmd=True):
    '''=================================================================
    + Name: assertAlert
    + Function: Kiểm tra xem trên màn hình có xuất hiện hộp thoại alert với một phần nội dung thuộc chuỗi target hay không?
    + Parameter:
      - target: Nội dung được in ra trong khung popup alert (HỖ TRỢ CONTAINS TEXT).
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-alert-command-to-check-whether-the-alert-is-displayed/ 
    + PIC: PIC/1.15.assertAlert.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertAlert" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      assert target in self.driver.switch_to.alert.text
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 1.16 assertConfirmation      ###
  ####################################
  def assertConfirmation(self,target="",value=None,description="",printCmd=True):
    '''=================================================================
    + Name: assertConfirmation
    + Function: Kiểm tra xem trên màn hình có xuất hiện hộp thoại Confirmation với một phần nội dung thuộc chuỗi target hay không?
    + Parameter:
      - target: Nội dung được in ra trong khung popup confirmation (HỖ TRỢ CONTAINS TEXT).
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-confirmation-command-to-check-whether-the-confirmation-dialog-is-displayed/ \n
    + PIC: PIC/1.16.assertConfirmation.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertConfirmation" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      assert value in self.driver.switch_to.alert.text
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 1.17 assertPrompt            ###
  ####################################
  def assertPrompt(self,target="",value=None,description="",printCmd=True):
    '''=================================================================
    + Name: assertPrompt
    + Function: Kiểm tra xem trên màn hình có xuất hiện hộp thoại Prompt (nhập liệu) với một phần nội dung thuộc chuỗi target hay không?
    + Parameter:
      - target: Nội dung được in ra trong khung popup prompt (HỖ TRỢ CONTAINS TEXT).
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-assert-prompt-command-for-checking-whether-the-prompt-dialog-is-displayed/ 
    + PIC: PIC/1.17.assertPrompt.png\n
    ================================================================='''
    #Print command and description
    commandName = "assertPrompt" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      assert value in self.driver.switch_to.alert.text
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  
  
  
  ###################################################################
  # 2. Wait For                                                     #
  ###################################################################
  ####################################
  ### 2.1 waitForElementPresent    ###
  ####################################
  def waitForElementPresent(self,target="",value=defaultWaitTimeMs,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForElementPresent (⚠️ CHÚ Ý: Target phải là duy nhất)
    + Function: The purpose of the wait for element present command is to wait for the element to be present on the UI and also the HTML DOM of the page.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Thời gian timeout (ms) tối đa cho việc wait. Mặc định là 30 giây.
      - description: Description will be printed out
    + Return:
      - [True,Element]: Trả về list [True,Element] nếu có sự hiện diện của nó trong code (HTML DOM).
      - [False,None]  : Nếu không có sự hiện diện của nó trong code (HTML DOM) và hết thời gian đợi.
    + Ref: https://www.qafox.com/new-selenium-ide-using-wait-for-element-present-command/ 
    + PIC: PIC/2.1.waitForElementPresent.png\n
    ================================================================='''
    value = self.defaultWaitTimeMs if value == "" else value
    #Print command and description
    commandName = "waitForElementPresent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      return [True,self.__waitForElementPresent(target,value)]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 2.2 waitForElementNotPresent ###
  ####################################
  def waitForElementNotPresent(self,target="",value=defaultWaitTimeMs,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForElementNotPresent (CHÚ Ý: Target phải là duy nhất)
    + Function: The purpose of the wait for element not present command is to wait for the element to be not present on the UI and also its HTML code is not present in the HTML DOM of the page.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Thời gian timeout (ms) tối đa cho việc wait. Mặc định là 30 giây.
      - description: Description will be printed out
    + Return:
      - [True,None] : Trả về list [True,None] nếu code của nó biến mất trong thời gian đợi (HTML DOM).
      - [False,None]: Nếu code của nó không biến mất và hết thời gian đợi (HTML DOM) và hết thời gian đợi.
    + Ref: https://www.qafox.com/new-selenium-ide-using-wait-for-element-not-present-command/ \n
    ================================================================='''
    value = self.defaultWaitTimeMs if value == "" else value
    #Print command and description
    commandName = "waitForElementNotPresent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.__waitForElementNotPresent(target,value)
      return [True,None]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 2.3 waitForElementVisible    ###
  ####################################
  def waitForElementVisible(self,target="",value=defaultWaitTimeMs,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForElementVisible (CHÚ Ý: Target phải là duy nhất)
    + Function: Đợi cho đến khi element được hiển thị trên UI.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Thời gian timeout (ms) tối đa cho việc wait. Mặc định là 30 giây.
      - description: Description will be printed out
    + Return:
      - [True,Element]: Trả về list [True,Element] nếu nó xuất hiện trong thời gian đợi.
      - [False,None]  : Nếu element không xuất hiện và hết thời gian đợi.
    + Ref: https://www.qafox.com/new-selenium-ide-using-wait-for-element-visible-command/ 
    + PIC: PIC/2.3.waitForElementVisible.png\n
    ================================================================='''
    value = self.defaultWaitTimeMs if value == "" else value
    #Print command and description
    commandName = "waitForElementVisible" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      return [True,self.__waitForElementVisible(target,value)]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 2.4 waitForElementNotVisible ###
  ####################################
  def waitForElementNotVisible(self,target="",value=defaultWaitTimeMs,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForElementNotVisible (CHÚ Ý: Target phải là duy nhất)
    + Function: Đợi cho đến khi element được ẩn trên UI.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Thời gian timeout (ms) tối đa cho việc wait. Mặc định là 30 giây.
      - description: Description will be printed out
    + Return:
      - [True,None] : Trả về list [True,None] nếu nó biến mất trong thời gian đợi.
      - [False,None]: Nếu element không biến mất và hết thời gian đợi.
    + Ref: https://www.qafox.com/new-selenium-ide-using-wait-for-element-not-visible-command/ \n
    ================================================================='''
    value = self.defaultWaitTimeMs if value == "" else value
    #Print command and description
    commandName = "waitForElementNotVisible" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.__waitForElementNotVisible(target,value)
      return [True,None]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ####################################
  ### 2.5 waitForElementEditable   ###
  ####################################
  def waitForElementEditable(self,target="",value=defaultWaitTimeMs,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForElementEditable (CHÚ Ý: Target phải là duy nhất)
    + Function: Đợi cho đến khi element được chỉnh sửa trên UI.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Thời gian timeout (ms) tối đa cho việc wait. Mặc định là 30 giây.
      - description: Description will be printed out
    + Return:
      - [True,Element]: Trả về list [True,Element] nếu nó chỉnh sửa được.
      - [False,None]  : Nếu element không chỉnh sửa được và hết thời gian đợi.
    + Ref: https://www.qafox.com/new-selenium-ide-using-wait-for-element-editable-command/ 
    + PIC: PIC/2.5.waitForElementEditable.png\n
    ================================================================='''
    value = self.defaultWaitTimeMs if value == "" else value
    #Print command and description
    commandName = "waitForElementEditable" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      return [True,self.__waitForElementEditable(target,value)]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################
  ### 2.6 waitForElementNotEditable ###
  #####################################
  def waitForElementNotEditable(self,target="",value=defaultWaitTimeMs,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForElementNotEditable (CHÚ Ý: Target phải là duy nhất)
    + Function: Đợi cho đến khi element không được phép chỉnh sửa trên UI.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Thời gian timeout (ms) tối đa cho việc wait. Mặc định là 30 giây.
      - description: Description will be printed out
    + Return:
      - Element: Trả về Element nếu nó không được chỉnh sửa.
      - None   : Nếu hết thời gian đợi.
    + Ref: https://www.qafox.com/new-selenium-ide-using-wait-for-element-not-editable-command/ \n
    ================================================================='''
    value = self.defaultWaitTimeMs if value == "" else value
    #Print command and description
    commandName = "waitForElementNotEditable" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      return self.__waitForElementNotEditable(target,value)
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return None
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################
  ### 2.7 waitForText               ###
  #####################################
  def waitForText(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 waitForText (CHÚ Ý: Target phải là duy nhất)
    + Function: Đợi nội dung text của đối tượng hiện ra (CHÚ Ý: CHO PHÉP CONTAINS TEXT)
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Nội dung text của đối tượng mong đợi (CHÚ Ý: CHO PHÉP CONTAINS TEXT)
               Thời gian đợi mặc định là defaultWaitTime (30 giây)
      - description: Description will be printed out
    + Return:
      - [True,None] : Trả về list [True,None] nếu nội dung text đó hiện ra ở đối tượng element đầu tiên khớp target.
      - [False,None]: Nội dung text đó không hiện ra trong thời gian định.\n
    ================================================================='''
    #Print command and description
    commandName = "waitForText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.__waitForText(target,value)
      return [True,None]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################
  ### 2.8 waitForAttr               ###
  #####################################
  def waitForAttr(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ 🔃 waitForAttr (CHÚ Ý: Target phải là duy nhất)
    + Function: Đợi nội dung atribute của đối tượng hiện khớp với mong đợi (CHÚ Ý: CHO PHÉP CONTAINS TEXT)
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: ⚠️ Dạng `<attributeName>=<attributeValue>`
      - description: Description will be printed out
    + Return:
      - [True,None] : Trả về list [True,None] nếu nội dung attribute khớp.
      - [False,None]: Nội dung attribute không khớp trong thời gian định.\n
    ================================================================='''
    #Print command and description
    commandName = "waitForAttr" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      startTime = time.time()
      curTime = startTime
      attr = value.split("=")
      attrName = attr[0]  # ATTRIBUTE NAME
      attrValue = attr[1] # ATTRIBUTE VALUE
      while curTime - startTime <= float(self.defaultWaitTimeMs)/1000:
        curTime = time.time()
        
        # print("============================")
        # print(type(attrValue))
        # print(attrValue)
        # print(type(self.others_content_getAttribute(target,attrName)))
        # print(self.others_content_getAttribute(target,attrName))
        
        if element == None:
          if str(self.others_content_getAttribute(target,attrName)) == str(attrValue): return [True,None]
        else:
          if str(self.others_content_getAttribute(target,attrName,'','',element)) == str(attrValue): return [True,None]
      return [False,None]
    except TimeoutException:
      if printCmd == True: logger.warning("WAITFOR TIMEOUT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      return [False,None]
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WAIT FOR FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###################################################################
  # 3. Mouse/Keyboard                                               #
  ###################################################################
  ###########################
  ### 3.1 click           ###
  ###########################
  def click(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ click (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of click command in Selenium IDE, is to click on any UI element in the application.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-click-command/
    + PIC: PIC/3.1.click.png\n
    ================================================================='''
    #Print command and description
    commandName = "click" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      # print(target)
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      element.click()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 3.2 doubleClick     ###
  ###########################
  def doubleClick(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ doubleClick (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of double click command in Selenium IDE, is to double click on any UI element.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-double-click-command/ 
    + PIC: PIC/3.2.doubleClick.png\n
    ================================================================='''
    #Print command and description
    commandName = "doubleClick" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.double_click(element).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 3.3 mouseDown       ###
  ###########################
  def mouseDown(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ mouseDown (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of the mouse down command is to perform mouse left click operation, mouse move at command is to move the holder UI element to the target element and the mouse up command is to release the mouse click to release the so far held UI element to the desired element in Selenium IDE.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-mouse-down-mouse-move-at-and-mouse-up-commands-for-dragging-and-dropping/ 
    + PIC: PIC/3.3.mouseDown.png\n
    ================================================================='''
    #Print command and description
    commandName = "mouseDown" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.click_and_hold(element).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 3.4 mouseMove       ###
  ###########################
  def mouseMove(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ mouseMove (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of the mouse down command is to perform mouse left click operation, mouse move at command is to move the holder UI element to the target element and the mouse up command is to release the mouse click to release the so far held UI element to the desired element in Selenium IDE.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-mouse-down-mouse-move-at-and-mouse-up-commands-for-dragging-and-dropping/ 
    + PIC: PIC/3.4.mouseMove.png\n
    ================================================================='''
    #Print command and description
    commandName = "mouseMove" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 3.5 mouseUp         ###
  ###########################
  def mouseUp(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ mouseUp (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of the mouse down command is to perform mouse left click operation, mouse move at command is to move the holder UI element to the target element and the mouse up command is to release the mouse click to release the so far held UI element to the desired element in Selenium IDE.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-mouse-down-mouse-move-at-and-mouse-up-commands-for-dragging-and-dropping/ 
    + PIC: PIC/3.5.mouseUp.png\n
    ================================================================='''
    #Print command and description
    commandName = "mouseUp" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.release(element).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ################################
  ### 3.6 dragAndDropToObject  ###
  ################################
  def dragAndDropToObject(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ dragAndDropToObject (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of drag and drop to object command in Selenium IDE, is to drag an UI element and drop it at another UI element.
    + Parameter:
      - target: Trỏ đến element cần chọn. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Trỏ đến element cần đến. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-drag-and-drop-to-object-command/ 
    + PIC: PIC/3.6.dragAndDropToObject.png\n
    ================================================================='''
    #Print command and description
    commandName = "dragAndDropToObject" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        draggedElement = self.findElement(target)
        droppedElement = self.findElement(value)
      else:
        draggedElement = self.others_browser_findChildElement(element,target,"",False)
        droppedElement = self.findDedicatedElement(element,value)
      actions = ActionChains(self.driver)
      actions.drag_and_drop(draggedElement,droppedElement).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  ################################
  ### 3.6 dragAndDropToObject  ###
  ################################
  def dragAndDropToObjectOffset(self,target="",value="",xOffset = 0, yOffset=0 ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ dragAndDropToObjectOffset (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of drag and drop to object command in Selenium IDE, is to drag an UI element and drop it at another UI element.
    + Parameter:
      - target: Trỏ đến element cần chọn. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Trỏ đến element cần đến. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-drag-and-drop-to-object-command/ 
    + PIC: PIC/3.6.dragAndDropToObject.png\n
    ================================================================='''
    #Print command and description
    commandName = "dragAndDropToObject" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        draggedElement = self.findElement(target)
      else:
        draggedElement = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.click_and_hold(draggedElement)
      xOffset  = int(xOffset)
      yOffset  = int(yOffset)
      xOffset8 = int(xOffset/8)
      yOffset8 = int(yOffset/8)
      xOffset4 = int(xOffset/4)
      yOffset4 = int(yOffset/4)
      xOffsetRemain = int(xOffset - 3*xOffset8 - 2*xOffset4)
      yOffsetRemain = int(yOffset - 3*yOffset8 - 2*yOffset4)
      
      actions.move_by_offset(xOffset8, yOffset8)
      actions.move_by_offset(xOffset8, yOffset8)
      actions.move_by_offset(xOffset4, yOffset4)
      actions.move_by_offset(xOffset4, yOffset4)
      actions.move_by_offset(xOffset8, yOffset8)
      actions.move_by_offset(xOffsetRemain, yOffsetRemain)
      actions.release()
      actions.perform()
      
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###########################
  ### 3.7 mouseOver       ###
  ###########################
  def mouseOver(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ mouseOver (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of the mouse over command is to perform mouse the hover action on the given UI element. And the purpose of the mouse out command is to move the mouse outside of the hovered UI element.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-mouse-over-and-mouse-out-commands/ 
    + PIC: PIC/3.7.mouseOver.png\n
    ================================================================='''
    #Print command and description
    commandName = "mouseOver" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 3.8 mouseOut        ###
  ###########################
  def mouseOut(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name:  mouseOut (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of the mouse over command is to perform mouse the hover action on the given UI element. And the purpose of the mouse out command is to move the mouse outside of the hovered UI element.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-mouse-over-and-mouse-out-commands/
    + ⚠️ CHÚ Ý: LỆNH NÀY QUĂNG CHUỘT VÀO GIỮA BODY.\n
    + PIC: PIC/3.8.mouseOut.png\n
    ================================================================='''
    #Print command and description
    commandName = "mouseOut" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      body = self.driver.find_element(By.TAG_NAME, "body")
      actions = ActionChains(self.driver)
      actions.move_to_element(body).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 3.9 type            ###
  ###########################
  def type(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ type (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Dùng để nhập liệu dạng string. Chú y: Hàm này không hiểu các phím chức năng như SendKeys.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Chuỗi String cần type
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-type-command/ 
    + PIC: PIC/3.9.type.png\n
    ================================================================='''
    #Print command and description
    commandName = "type" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      element.send_keys(value)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###########################
  ### 3.10 sendKeys       ###
  ###########################
  def sendKeys(self,target="",class_Keys="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ sendKeys (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Giả lập việc nhấn phím trên bàn phím. Có thể nhập vào một chuỗi ký tự giống như Type nhưng đây nó có thẻ hiểu được các phím chức năng.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - class_Keys: Phím keys cần gõ dạng "${KEY_ENTER}","${KEY_DELETE}",...
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-send-keys-command/
    + Ex1: chrome.sendKeys("name=q","${KEY_CONTROL}A") #Hotkeys Ctrl+A (CHÚ Ý: Kiểu combo này không hỗ trợ trên Selenium IDE)
    + Ex2: chrome.sendKeys("name=q","${KEY_ENTER}") #Stroke Enter key\n
    + PIC: PIC/3.10.sendKeys.png\n
    ================================================================='''
    #Print command and description
    commandName = "sendKeys" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(class_Keys)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      value = self.__replaceSpecialKeys(class_Keys)
      element.send_keys(value)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###################################################################
  # 4. Browser                                                      #
  ###################################################################
  ###########################
  ### 4.1 open            ###
  ###########################
  def open(self,target="https://www.tiktok.com",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: Open (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of open command in Selenium IDE, is to open the given Application base URL in the browser.
    + Parameter:
      - target: Web URL
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ex: IDE.browser.open("https://www.tiktok.com")
    + Ref: https://www.qafox.com/new-selenium-ide-open-command/ \n
    ================================================================='''
    #Print command and description
    commandName = "open" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.get(target)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T OPEN URL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 4.2 setWindowSize   ###
  ###########################
  def setWindowSize(self,target="1024x768",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: setWindowSize
    + Function: The purpose of set window size command in Selenium IDE, is to resize the browser window.
    + Parameter:
      - target: tỉ lệ màn hình WxH. Ex: "1024x768", "800x600",...
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-set-window-size-command-for-resizing-the-browser-window/ 
    + PIC: PIC/4.2.setWindowSize.png\n
    ================================================================='''
    #Print command and description
    commandName = "setWindowSize" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      browserWidth = int(target.split("x")[0])
      browserHeight = int(target.split("x")[1])
      self.driver.set_window_size(browserWidth, browserHeight)
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T SET WINDOW. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 4.3 selectWindow    ###
  ###########################
  def selectWindow(self,target="tab=0",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: selectWindow (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of the select window command is to select or switch to another window.
                We can either use the window title or window tab index to select a window using the select window command.
    + Parameter:
      - target:
        1. "title=<contains of title>": Select browser tab base on contain of title.
        2. "tab=0": Tab >= 0. Select browser tab base on tab index (0: first tab, 1: second tab on right side, 2:...)
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-select-window-command/ 
    + PIC: PIC/4.3.selectWindow.png\n
    ================================================================='''
    #Print command and description
    commandName = "selectWindow" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.refreshBrowserTabInfo(backCurrentTab=False) #Refresh value of: self.browserTabList, self.browserTabHandle, self.browserTabNum
      
      #Checking title of target (title=)
      if target.startswith("title="):
        targetTitle = target[len("title="):]
        i = 0
        for iTitle in self.browserTabList:
          if targetTitle in iTitle: #Found Expected Title
            self.driver.switch_to.window(self.browserTabHandle[i]) #Switch to target tab
            self.reqWaitCmdFlg = True
            return
          i+=1
        logger.error("Target title='%s' is NOT FOUND in tab list: %s",targetTitle,self.browserTabList)
        raise ValueError
      #Checking tab index of target (tab=)
      if target.startswith("tab="):
        targetTabIndex = int(target[len("tab="):])
        if 0<= targetTabIndex < self.browserTabNum:
          self.driver.switch_to.window(self.browserTabHandle[targetTabIndex]) #Switch to target tab
          self.reqWaitCmdFlg = True
          return
        else:
          logger.error("Tab index[%d] is out of range[0:%d]",targetTabIndex,self.browserTabNum-1)
          raise ValueError
      #Others target
      logger.error("TARGET WRONG FORMAT: TITLE/TAB!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      raise ValueError
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T FIND TARGET TAB. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  ###########################
  ### 4.4 close           ###
  ###########################
  def close(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: close (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of close command in Selenium IDE, is to close the browser tab.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-close-command-for-closing-the-browser/ \n
    ================================================================='''
    #Print command and description
    commandName = "close" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.close #Close current browser tab
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CLOSE TAB OF BROWSER FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 4.5 pause           ###
  ###########################
  def pause(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: pause
    + Function: The purpose of the pause command is to pause the execution of Selenium Test for the required time.
    + Parameter:
      - target: pause time in ms.
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-pause-command/ 
    + PIC: PIC/4.5.pause.png\n
    ================================================================='''
    #Print command and description
    commandName = "pause" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      exit()
    
    #Function operation
    time.sleep(int(target)/1000)
  
  ###########################
  ### 4.6 echo           ###
  ###########################
  def echo(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: echo
    + Function: The purpose of echo command in Selenium IDE, is to print the messages given in Selenium IDE.
    + Parameter:
      - target: String of message or print ${x} in self.vars["x"]
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-echo-command/
    + Ex1: chrome.echo("HELLO")
    + Ex2: chrome.echo("${url}") #print value from self.vars["url"]\n
    ================================================================='''
    #Print command and description
    commandName = "echo" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    if target.startswith("${"):
      varName = target[len("${"):len(target)-1]
      print(self.vars[varName])
    else:
      print(target)
  
  ###########################
  ### 4.7 runScript       ###
  ###########################
  def runScript(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: runScript (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of run script command in Selenium IDE, is to execute the JavaScript code snippets in Selenium IDE.
    + Parameter:
      - target: String of Javascript SNIPPET. Ex: "alert(\"Hello World!\")"
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-run-script-command/
    + Ex: chrome.runScript("alert(\"Hello World!\")")\n
    + PIC: PIC/4.7.runScript.png\n
    ================================================================='''
    #Print command and description
    commandName = "runScript" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.execute_script(target)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CLOSE TAB OF BROWSER FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 4.8 executeScript   ###
  ###########################
  def executeScript(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: executeScript (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of execute script command in Selenium IDE, is to execute the JavaScript code in Selenium IDE.
    + Parameter:
      - target: String of Javascript. Ex: "alert('This is Java script')"
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-execute-script-command/
    + Ex1: chrome.executeScript("alert('This is Java script')")
    + Ex2: chrome.executeScript("window.scrollTo(0,2000")\n
    ================================================================='''
    #Print command and description
    commandName = "executeScript" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.execute_script(target)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CLOSE TAB OF BROWSER FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ################################
  ### 4.9 executeAsyncScript   ###
  ################################
  def executeAsyncScript(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: executeAsyncScript (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of execute async script command in Selenium IDE, is to execute the async snippet of JavaScript code in Selenium IDE.
    + Parameter:
      - target: String of Async Javascript.
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-execute-async-script-command/
    + Ex1: 
        asyncScript =  "window.setTimeout(function() {\
                            alert('JS Timeout Testing');\
                        }, 1000);"
        chrome.executeAsyncScript(asyncScript)
    + Ex2: 
        asyncScript =  "window.setInterval(function() {\
                            alert('JS Interval Testing');\
                        }, 1000);"
        chrome.executeAsyncScript(asyncScript)\n
    + PIC: PIC/4.9.executeAsyncScript.png\n
    ================================================================='''
    #Print command and description
    commandName = "executeAsyncScript" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.execute_async_script(target)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CLOSE TAB OF BROWSER FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  
  ###################################################################
  # 5. Store                                                        #
  ###################################################################
  ###########################
  ### 5.1 storeTitle      ###
  ###########################
  def storeTitle(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: storeTitle
    + Function: The purpose of the store title command is to retrieve and store the title of the page into a variable in Selenium IDE.
    + Parameter:
      - target: None
      - value: String of x var name in self.vars["x"]
      - description: Description will be printed out
    + Return: Title
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-title-command/ 
    + Ex: chrome.storeTitle("","storeTitle")\n
    + PIC: PIC/5.1.storeTitle.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeTitle" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.vars[value] = self.driver.title
      return self.driver.title
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE TITLE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 5.2 store           ###
  ###########################
  def store(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: store
    + Function: The purpose of the store command is to store any text into a variable in Selenium IDE.
    + Parameter:
      - target: Var name in self.vars['']
      - value: Value in string. Ex: "123"->Value, "abc", "12A8",...
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-command/ 
    + PIC: PIC/5.2.store.png\n
    ================================================================='''
    #Print command and description
    commandName = "store" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+target+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      try: #Value is numeric
        value = float(value)
        self.vars[target] = value
      except: #Value is a string
        self.vars[target] = value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 5.3 storeValue      ###
  ###########################
  def storeValue(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ storeValue
    + Function: The purpose of the store value command is to retrieve and store the value attribute value of the located UI element into a variable in Selenium IDE.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Var name in self.vars['']
      - description: Description will be printed out
    + Return: elementValue
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-value-command/ 
    + PIC: PIC/5.3.storeValue.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeValue" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+target+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      elementValue = element.get_attribute("value")
      self.vars[value] = elementValue
      return elementValue
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE VALUE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 5.4 storeText       ###
  ###########################
  def storeText(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ storeText
    + Function: The purpose of the store text command is to retrieve and store the text between the HTML tags of the located UI element into a variable in Selenium IDE.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Var name in self.vars['']
      - description: Description will be printed out
    + Return: Nội dung text được lưu - Return None nếu đối tượng không tìm thấy.
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-text-command/ 
    + PIC: 
      - PIC/5.4.storeText.png\n
      - PIC/5.4.storeText_2.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+target+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return None
      elementText = element.text
      self.vars[value] = elementText
      return elementText
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE TEXT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 5.5 storeAttribute  ###
  ###########################
  def storeAttribute(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ storeAttribute
    + Function: Lưu thuộc tính của một đối tượng nào đó. VD: but2@type -> Lưu giá trị của thuộc tính `type` của đối tượng `but2`.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Var name in self.vars['']
      - description: Description will be printed out
    + Return: elementAttribute
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-attribute-command/
    + Example: storeAttribute("id=but2@type","but2TypeAttrVar")\n
    + PIC: PIC/5.5.storeAttribute.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeAttribute" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+target+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      attributeName = target.split("@")[-1] #Lấy tên thuộc tính nằm sau dấu @ cuối cùng.
      locatorName = target.split("@"+attributeName)[0] #Lấy Xpath đối tượng nằm trước thuộc tính.
      if element == None:
        element = self.findElement(locatorName)
      else:
        element = self.findDedicatedElement(element,locatorName)
      elementAttribute = element.get_attribute(attributeName)
      self.vars[value] = elementAttribute
      return elementAttribute
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE ATTRIBUTE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 5.6 storeXpathCount ###
  ###########################
  def storeXpathCount(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ storeXpathCount
    + Function: The purpose of the store xpath count command is to retrieve and store the count of the UI elements located using the given XPath Locating strategy into a variable in Selenium IDE.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Var name in self.vars['']
      - description: Description will be printed out
    + Return: Số lượng Xpath Count
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-xpath-count-command/ 
    + PIC: PIC/5.6.storeXpathCount.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeXpathCount" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+target+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)
      numXpathCount = len(elements)
      self.vars[value] = numXpathCount
      return numXpathCount
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE ATTRIBUTE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 5.7 storeJson       ###
  ###########################
  def storeJson(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: storeJson
    + Function: The purpose of the store json command is to retrieve and store json content into a variable in Selenium IDE.
    + Parameter:
      - target: JSON String
      - value: Var name in self.vars['']
      - description: Description will be printed out
    + Return: Chuỗi JSON được lưu
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-json-command/
    + Ex: chrome.storeJson('{ "glossary": { "title": "example glossary", "GlossDiv": { "title": "S", "GlossList": { "GlossEntry": { "ID": "SGML", "SortAs": "SGML", "GlossTerm": "Standard Generalized Markup Language", "Acronym": "SGML", "Abbrev": "ISO 8879:1986", "GlossDef": { "para": "A meta-markup language, used to create markup languages such as DocBook.", "GlossSeeAlso": ["GML", "XML"] }, "GlossSee": "markup" } } } } }',"ABC")
          print(chrome.vars["ABC"]["glossary"]["title"]) -> "example glossary"\n
    + PIC: PIC/5.7.storeJson.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeJson" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+target+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      jsonLoad = json.loads(target)
      self.vars[value] = jsonLoad
      return jsonLoad
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T STORE JSON DATA. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ##############################
  ### 5.8 storeWindowHandler ###
  ##############################
  def storeWindowHandler(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: storeWindowHandler
    + Function: The purpose of the store window handle command is to store the window using its locator i.e. tab index or title.
    + Parameter:
      - target: Determine Browser tab with "title=" or "tab=".
        1. "title=<contains of title>": Select browser tab base on contain of title.
        2. "tab=0": Tab >= 0. Select browser tab base on tab index (0: first tab, 1: second tab on right side, 2:...)
      - value: Var name in self.vars['']
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-store-window-handle-command/ 
    + PIC: PIC/5.8.storeWindowHandler.png\n
    ================================================================='''
    #Print command and description
    commandName = "storeWindowHandler" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.refreshBrowserTabInfo() #Refresh value of: self.browserTabList, self.browserTabHandle, self.browserTabNum
      
      #Checking title of target (title=)
      if target.startswith("title="):
        targetTitle = target[len("title="):]
        i = 0
        for iTitle in self.browserTabList:
          if targetTitle in iTitle: #Found Expected Title
            self.vars[value] = self.browserTabHandle[i] #Store target window handler
            return
          i+=1
        logger.error("Target title='%s' is NOT FOUND in tab list: %s",targetTitle,self.browserTabList)
        LotusLib.addScreenCaptureToHtmlLog()
        raise ValueError
      #Checking tab index of target (tab=)
      if target.startswith("tab="):
        targetTabIndex = int(target[len("tab="):])
        if 0<= targetTabIndex < self.browserTabNum:
          self.vars[value] = self.browserTabHandle[targetTabIndex] #Store target window handler
          return
        else:
          logger.error("Tab index[%d] is out of range[0:%d]",targetTabIndex,self.browserTabNum-1)
          raise ValueError
      #Others target
      logger.error("TARGET WRONG FORMAT: TITLE/TAB!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      raise ValueError
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T FIND TARGET TAB. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###################################################################
  # 6. Web Content                                                  #
  ###################################################################
  ###########################
  ### 6.1 select          ###
  ###########################
  def select(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ select (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Chọn họn đối tượng option dựa trên `LABEL` trong dropdown list.
    + Parameter:
      - target: dropbox element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Là `LABEL` của option. Ex: "Audi", "doc 4".
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-select-command-for-selecting-a-dropdown-option/
    + Ex: http://omayo.blogspot.com/ -> chrome.select("id=drop1","doc 4")
    + PIC: PIC/6.1.Select.png\n
    ================================================================='''
    #Print command and description
    commandName = "select" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if value.startswith("label="):
        optionLabel = value[len("label="):]
      else:
        optionLabel = value
      if element == None:
        dropboxElement = self.findElement(target)
      else:
        dropboxelement = self.others_browser_findChildElement(element,target,"",False)
      targetOption = dropboxElement.find_element(By.XPATH,"//option[contains(text(),'"+optionLabel+"')]")
      targetOption.click()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T SELECT OPTION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 6.2 check           ###
  ###########################
  def check(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ check (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Đánh dấu chọn với checkbox hay radio button.
    + Parameter:
      - target: radio element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None.
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-check-command-for-selecting-a-radio-button/
    + Ex: http://omayo.blogspot.com/ -> chrome.check("id=radio1")
    + PIC: PIC/6.2.Check.png\n
    ================================================================='''
    #Print command and description
    commandName = "check" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        radioElement = self.findElement(target)
      else:
        radioelement = self.others_browser_findChildElement(element,target,"",False)
      if radioElement.is_selected() != True: radioElement.click()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T CHECK CHECKBOX/RADIO. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 6.3 unCheck         ###
  ###########################
  def unCheck(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ unCheck (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of uncheck command in Selenium IDE, is to deselect the radio button.
    + Parameter:
      - target: radio element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None.
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-uncheck-command-for-deselecting-a-radio-button/
    + Ex: http://omayo.blogspot.com/ -> chrome.unCheck("xpath=//input[@value='Book']")\n
    ================================================================='''
    #Print command and description
    commandName = "unCheck" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        radioElement = self.findElement(target)
      else:
        radioelement = self.others_browser_findChildElement(element,target,"",False)
      if radioElement.is_selected(): radioElement.click()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T UNCHECK CHECKBOX/RADIO. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 6.4 editContent     ###
  ###########################
  def editContent(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ editContent (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Edit/Thay đổi nội dung của đối tượng (Thường dùng đề nhập liệu)
    + Parameter:
      - target: Xác định element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Value.
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-edit-content-command/
    + Ex: http://omayo.blogspot.com/ -> chrome.editContent("id=but2","ABC")\n
    ================================================================='''
    #Print command and description
    commandName = "editContent" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      self.driver.execute_script("\
        if(arguments[0].contentEditable === 'true'){\
          arguments[0].innerText = '"+value+"'\
        }\
      ",element)
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T EDIT CONTENT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 6.5 addSelection    ###
  ###########################
  def addSelection(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ addSelection (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Chọn nhiều option với dropbox cho phép chọn nhiều một lúc (Giống ctrl và click chọn).
    + Parameter:
      - target: Xác định element của multi selection box. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Tên label. Ex: "Audi", "Volvo".
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-add-selection-command-for-selecting-multi-selection-box-field-options/
    + Ex: http://omayo.blogspot.com/ ->\n
          chrome.addSelection("id=multiselect1","Volvo")\n
          chrome.addSelection("id=multiselect1","Audi")\n
    + PIC: PIC/6.5.AddSelect.png\n
    ================================================================='''
    #Print command and description
    commandName = "addSelection" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if value.startswith("label="):
        optionLabel = value[len("label="):]
      else:
        optionLabel = value
      if element == None:
        dropboxElement = self.findElement(target)
      else:
        dropboxelement = self.others_browser_findChildElement(element,target,"",False)
      optionElement = dropboxElement.find_element(By.XPATH,"//option[contains(text(),'"+optionLabel+"')]")
      if optionElement.is_selected() == False: optionElement.click()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T ADD SELECTION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 6.6 removeSelection ###
  ###########################
  def removeSelection(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ removeSelection (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Bỏ chọn nhiều option với dropbox cho phép chọn nhiều một lúc (Giống ctrl và click bỏ chọn).
    + Parameter:
      - target: Xác định element của multi selection box. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Tên label. Ex: "Audi", "Volvo".
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-remove-selection-command/
    + Ex: http://omayo.blogspot.com/ ->\n
          chrome.addSelection("id=multiselect1","Volvo")\n
          chrome.addSelection("id=multiselect1","Audi")\n
          chrome.removeSelection("id=multiselect1","Volvo")\n
    + PIC: PIC/6.6.RemoveSelection.png\n
    ================================================================='''
    #Print command and description
    commandName = "removeSelection" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if value.startswith("label="):
        optionLabel = value[len("label="):]
      else:
        optionLabel = value
      if element == None:
        dropboxElement = self.findElement(target)
      else:
        dropboxelement = self.others_browser_findChildElement(element,target,"",False)
      optionElement = dropboxElement.find_element(By.XPATH,"//option[contains(text(),'"+optionLabel+"')]")
      if optionElement.is_selected() == True: optionElement.click()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T REMOVE SELECTION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###########################
  ### 6.7 selectFrame     ###
  ###########################
  def selectFrame(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: selectFrame (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Chọn một frame (IFRAME) trong trang web. Các frame con sẽ có mục document riêng và body riêng như như một trang html lồng bên trong một trang html.
    + Parameter:
      - target: `index=<n>` với n là giá trị index của frame. Ex: "index=0", "index=1".
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-select-frame-command/
    + Ex: http://omayo.blogspot.com/ -> chrome.selectFrame("index=0")\n
    + PIC: PIC/6.7.SelectFrame.png\n
    ================================================================='''
    #Print command and description
    commandName = "selectFrame" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if target.startswith("index="):
        indexNum = int(target[len("index="):])
        oldSourceLen = len(self.driver.page_source) 
        self.driver.switch_to.frame(indexNum)
        newSourceLen = oldSourceLen
        timerCounter = 0
        while newSourceLen == oldSourceLen:
          newSourceLen = len(self.driver.page_source)
          if timerCounter > 60:
            LotusLib.addScreenCaptureToHtmlLog()
            raise Exception("TIMEOUT: Waited over 30 seconds but iframe not switch to the new one!!!")
          timerCounter += 1
          time.sleep(0.5)
        self.reqWaitCmdFlg = True
      else:
        logger.fatal("WRONG FORMAT OF INDEX (\"index=x\"): %s",target)
        raise ValueError  # shorthand for 'raise ValueError()'
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T REMOVE SELECTION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ##################################################
  ### 6.8 webdriverChooseOkOnVisibleConfirmation ###
  ##################################################
  def webdriverChooseOkOnVisibleConfirmation(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: webdriverChooseOkOnVisibleConfirmation (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of webdriver choose ok on visible confirmation command in Selenium IDE, is to select the 'OK' button on the displayed confirmation dialog.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-webdriver-choose-ok-on-visible-confirmation-command-for-selecting-ok-button-on-the-displayed-confirmation-dialog/
    + Ex: http://omayo.blogspot.com/ ->\n
          chrome.driver.find_element(By.ID, "confirm").click() #Open confirmation prompt after clicking\n
          chrome.webdriverChooseOkOnVisibleConfirmation()\n
    + PIC: PIC/6.8.WebdriverChooseOkOnVisibleConfirmation.png\n
    ================================================================='''
    #Print command and description
    commandName = "webdriverChooseOkOnVisibleConfirmation" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.switch_to.alert.accept()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T CHOOSE OK ON CONFIRMATION PROMPT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ######################################################
  ### 6.9 webdriverChooseCancelVisibleConfirmation   ###
  ######################################################
  def webdriverChooseCancelVisibleConfirmation(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: webdriverChooseCancelVisibleConfirmation (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of webdriver choose cancel on visible confirmation command in Selenium IDE, is to select the 'Cancel' button on the displayed confirmation dialog.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-webdriver-choose-cancel-on-visible-confirmation-command-for-selecting-cancel-button-on-the-displayed-confirmation-dialog/
    + Ex: http://omayo.blogspot.com/ ->\n
          chrome.driver.find_element(By.ID, "confirm").click() #Open confirmation prompt after clicking\n
          chrome.webdriverChooseCancelVisibleConfirmation()\n
    + PIC: PIC/6.9.WebdriverChooseCancelVisibleConfirmation.png\n
    ================================================================='''
    #Print command and description
    commandName = "webdriverChooseCancelVisibleConfirmation" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.switch_to.alert.dismiss()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T CHOOSE CANCEL ON CONFIRMATION PROMPT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #######################################################
  ### 6.10 webdriverAnswerOnVisiblePrompt ###
  #######################################################
  def webdriverAnswerOnVisiblePrompt(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: webdriverAnswerOnVisiblePrompt (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of webdriver answer on visible prompt command in Selenium IDE, is to enter the answer into the prompt when the prompt is actually displayed.
    + Parameter:
      - target: Answer message
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-webdriver-answer-on-visible-prompt-command-for-answering-the-prompt/
    + Ex: http://omayo.blogspot.com/ ->\n
          chrome.driver.find_element(By.ID, "prompt").click() #Open prompt after clicking\n
          chrome.webdriverAnswerOnVisiblePrompt("Answer message: Hello")\n
    + PIC: PIC/6.10.WebdriverAnswerOnVisiblePrompt.png\n
    ================================================================='''
    #Print command and description
    commandName = "webdriverAnswerOnVisiblePrompt" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      alert = self.driver.switch_to.alert
      alert.send_keys(target)
      alert.accept()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T ANSWER ON PROMPT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #################################################
  ### 6.11 webdriverChooseCancelOnVisiblePrompt ###
  #################################################
  def webdriverChooseCancelOnVisiblePrompt(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: webdriverChooseCancelOnVisiblePrompt (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of webdriver choose cancel on visible prompt command in Selenium IDE, is to cancel the prompt when it is actually displayed.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ref: https://www.qafox.com/new-selenium-ide-using-webdriver-choose-cancel-on-visible-prompt-command-for-cancelling-the-prompt/
    + Ex: http://omayo.blogspot.com/ ->\n
          chrome.driver.find_element(By.ID, "prompt").click() #Open prompt after clicking\n
          chrome.webdriverChooseCancelOnVisiblePrompt()\n
    + PIC: PIC/6.11.WebdriverChooseCancelOnVisiblePrompt.png\n
    ================================================================='''
    #Print command and description
    commandName = "webdriverChooseCancelOnVisiblePrompt" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.switch_to.alert.dismiss()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CAN'T CHOOSE CANCEL ON PROMPT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  
  
  ###################################################################
  # 9. OTHERS                                                       #
  ################################################################### 
  #######################################################
  ### 9.1 others_content_findFirstElement             ###
  #######################################################
  def others_content_findFirstElement(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_findFirstElement
    + Function: Trả về element tìm thấy đầu tiên.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              (⚠️🚨 Chú ý: "//" sẽ tìm kiếm trên toàn bộ trang web. Nếu chỉ tìm kiếm trong element con thì không cần "//")
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: IDE.others.others_content_findLastElement("xpath=td",`element`=row)
      - value: None
      - description: Description will be printed out
    + Return:
      - True: First element.
      - False: Return None.\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_findFirstElement" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
        element.location
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return None
      return element
    except Exception:
      return None

  #####################################################
  ### 9.2 others_content_findLastElement            ###
  #####################################################
  def others_content_findLastElement(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_findLastElement
    + Function: Trả về element cuối cùng tìm thấy.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              (⚠️🚨 Chú ý: "//" sẽ tìm kiếm trên toàn bộ trang web. Nếu chỉ tìm kiếm trong element con thì không cần "//")
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: IDE.others.others_content_findLastElement("xpath=td",`element`=row)
      - value: None
      - description: Description will be printed out
    + Return:
      - True: Last element.
      - False: Return None.\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_findLastElement" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)
      if (len(elements) == 0): return None
      return elements[len(elements)-1] #<--- RETURN LAST ELEMENT
    except Exception:
      return None

  #####################################################
  ### 9.2 others_content_findAllElements            ###
  #####################################################
  def others_content_findAllElements(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_findAllElements
    + Function: Trả về list các element tìm thấy.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              (⚠️🚨 Chú ý: "//" sẽ tìm kiếm trên toàn bộ trang web. Nếu chỉ tìm kiếm trong element con thì không cần "//")
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: IDE.others.others_content_findAllElements("xpath=td",`element`=row)
      - value: None
      - description: Description will be printed out
    + Return:
      - True: List of matched elements.
      - False: Return None.
    + EX: IDE.others.others_content_findAllElements("xpath=td",element=row)
      => Return all td elements in parent element: row\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_findAllElements" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        elements = self.findElements(target)
      else:
        elements = self.others_browser_findChildElements(element,target,"",False)
      if (len(elements) == 0): return None
      return elements
    except Exception:
      return None

  #####################################################
  ### 9.3 others_browser_getCurrentURL              ###
  #####################################################
  def others_browser_getCurrentURL(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_getCurrentURL
    + Function: Trả về địa chỉ URL hiện tại.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: String of current URL\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_getCurrentURL" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      return self.driver.current_url()
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT GET URL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.4 others_content_getPageSourceCode          ###
  #####################################################
  def others_content_getPageSourceCode(self,target="",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_getPageSourceCode
    + Function: Trả về source code của page hiện tại.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: Source code của page hiện tại\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_getPageSourceCode" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        return self.driver.page_source
      else:
        return element.get_attribute('innerHTML')

    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT GET PAGE SOURCE CODE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.5 others_browser_closeCurrentTab            ###
  #####################################################
  def others_browser_closeCurrentTab(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_closeCurrentTab  (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Đóng tab browser hiện tại.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_closeCurrentTab" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.reqWaitCmdFlg = True
      return self.driver.close()
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT GET PAGE SOURCE CODE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.6 others_browser_closeAllRightTabs          ###
  #####################################################
  def others_browser_closeAllRightTabs(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_closeAllRightTabs  (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Đóng tất cả các tab khác tab bên phải tab đang mở.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: Số lượng các tab đã bị đóng (Chính là self.browserTabNum-1)\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_closeAllRightTabs" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.browserTabList = []   #Clear Tab list
      self.browserTabHandle = [] #Clear Tab handle
      self.browserTabNum = 0     #Clear Tab Number
      main_handler = self.driver.current_window_handle

      closeTabCnt = 0
      closeTabFlag = 0
      for handle in self.driver.window_handles:
        self.driver.switch_to.window(handle)
        if handle != main_handler:
          if closeTabFlag == 1:
            self.driver.close()
            closeTabCnt += 1
        else:
          closeTabFlag = 1
          self.browserTabList.append(self.driver.title)
          self.browserTabHandle.append(handle)
      self.browserTabNum = len(self.browserTabList)
      self.driver.switch_to.window(main_handler)
      self.reqWaitCmdFlg = True
      return closeTabCnt
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT CLOSE ALL RIGHT TABS. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  #####################################################
  ### 9.7 others_browser_closeAllOtherTabs          ###
  #####################################################
  def others_browser_closeAllOtherTabs(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_closeAllOtherTabs (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Đóng tất cả các tab khác tab đang mở.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: Số lượng các tab đã bị đóng (Chính là self.browserTabNum-1)\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_closeAllOtherTabs" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.browserTabList = []   #Clear Tab list
      self.browserTabHandle = [] #Clear Tab handle
      self.browserTabNum = 0     #Clear Tab Number
      main_handler = self.driver.current_window_handle

      closeTabCnt = 0
      for handle in self.driver.window_handles:
        self.driver.switch_to.window(handle)
        if handle != main_handler:
          self.driver.close()
          closeTabCnt += 1
        else:
          self.browserTabList.append(self.driver.title)
          self.browserTabHandle.append(handle)
      self.browserTabNum = len(self.browserTabList)
      self.driver.switch_to.window(main_handler)
      self.reqWaitCmdFlg = True
      return closeTabCnt
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT CLOSE ALL OTHER TABS. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
    
  #####################################################
  ### 9.8 others_browser_getNumberOfTabs            ###
  #####################################################
  def others_browser_getNumberOfTabs(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_getNumberOfTabs
    + Function: Trả về số lượng Tab đăng mở.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: Số lượng tab đang mở (Chính là self.browserTabNum)\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_getNumberOfTabs" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.refreshBrowserTabInfo
      return self.browserTabNum
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT GET NUMBER OF TABS. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  #####################################################
  ### 9.9 others_browser_maximizeWindow             ###
  #####################################################
  def others_browser_maximizeWindow(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_maximizeWindow (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Mở cửa sổ maximize
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_maximizeWindow" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.reqWaitCmdFlg = True
      return self.driver.maximize_window()
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT MAXIMIZE WINDOW. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.10 others_browser_minimizeWindow            ###
  #####################################################
  def others_browser_minimizeWindow(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_minimizeWindow (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Mở cửa sổ minimize
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_minimizeWindow" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.reqWaitCmdFlg = True
      return self.driver.minimize_window()
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT MAXIMIZE WINDOW. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.11 others_browser_fullscreenWindow            ###
  #####################################################
  def others_browser_fullscreenWindow(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_fullscreenWindow (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Mở cửa sổ Fullscreen
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_fullscreenWindow" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.reqWaitCmdFlg = True
      return self.driver.fullscreen_window()
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT FULLSCREEN WINDOW. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.12 others_browser_printPagePDF              ###
  #####################################################
  def others_browser_printPagePDF(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_printPagePDF (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: In màn hình hiện tại ra pdf -> lưu vào /Downloads
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None
    + Link: REFER1 https://www.geeksforgeeks.org/working-with-pdf-files-in-python/?ref=lbp \n
            REFER2 https://www.selenium.dev/selenium/docs/api/java/org/openqa/selenium/print/PrintOptions.html\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_printPagePDF" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      logger.warning("REFER: https://www.geeksforgeeks.org/working-with-pdf-files-in-python/?ref=lbp")
      #Print must be in headless mode
      # printOption1 = PrintOptions()
      # printOption1.page_width = 400
      # printOption1.page_height = 400
      # options = printOption1.to_dict()
      # value = self.driver.print_page()
      # print(value)
      
      #Print must be in show GUI mode
      self.driver.execute_script('window.print();') #Store in /Downloads
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT PRINT PAGE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.13 others_browser_navigationBack            ###
  #####################################################
  def others_browser_navigationBack(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_navigationBack (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Nhấn nút Back trên thanh Navigation của Browser.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_navigationBack" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.back()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RUN NAVIGATION BACK. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.14 others_browser_navigationFoward          ###
  #####################################################
  def others_browser_navigationFoward(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_navigationFoward (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Nhấn nút Forward trên thanh Navigation của Browser.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_navigationFoward" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.forward()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RUN NAVIGATION FORWARD. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.15 others_browser_navigationRefresh         ###
  #####################################################
  def others_browser_navigationRefresh(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_navigationRefresh (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Nhấn nút Refresh trên thanh Navigation của Browser.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_navigationRefresh" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.refresh()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RUN NAVIGATION REFRESH. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.16 others_browser_setPageLoadTimeout        ###
  #####################################################
  def others_browser_setPageLoadTimeout(self,target="30000",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_setPageLoadTimeout
    + Function: Cài đặt thời gian đợi của Page.
    + Parameter:
      - target: Thời gian in ms
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_setPageLoadTimeout" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.set_page_load_timeout(int(target)/1000)
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RUN NAVIGATION REFRESH. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.17 others_browser_saveCurrentScreenshot     ###
  #####################################################
  def others_browser_saveCurrentScreenshot(self,target="save_screen.png",value="",description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_browser_saveCurrentScreenshot
    + Function: Chụp màn hình hiện tại (Thuộc nội dung web) và lưu thành file PNG
    + Parameter:
      - target: Đường dẫn lưu trữ
      - value: None
      - description: Description will be printed out
    + Return: None
    + Ex: chrome.others_browser_saveCurrentScreenshot('D:/save_screen.png')\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_saveCurrentScreenshot" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      
      if element == None:
        self.driver.save_screenshot(target)
      else:
        element.screenshot(target)
        element.screenshot_as_png
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RUN NAVIGATION REFRESH. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.17 others_browser_getWindowSize             ###
  #####################################################
  def others_browser_getWindowSize(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_getWindowSize
    + Function: Trả về kích thước màn hình hiện tại.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_getWindowSize" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.get_window_size(target)
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RUN NAVIGATION REFRESH. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.18 others_browser_getBrowserPosition        ###
  #####################################################
  def others_browser_getBrowserPosition(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_getBrowserPosition
    + Function: Trả về vị trí của brower trên màn hình.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_getBrowserPosition" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.get_window_position()
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT GET BROWSER POSITION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #####################################################
  ### 9.19 others_browser_setBrowserPosition        ###
  #####################################################
  def others_browser_setBrowserPosition(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_setBrowserPosition (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Trả về vị trí của brower trên màn hình.
    + Parameter:
      - target: Vị trí X
      - value: Vị trí Y
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_setBrowserPosition" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.set_window_position(int(target),int(value))
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT SET BROWSER POSITION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  #####################################################
  ### 9.20 others_browser_waitCaptchaSolving        ###
  #####################################################
  def others_browser_waitCaptchaSolving(self,target=120,value="",description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 others_browser_waitCaptchaSolving
    + Function: Đợi đến khi captCha hoàn thành (Ngoại trừ captcha hình -> text)
    + Parameter:
      - target: Thời gian chờ (s). Mặc định 120s.
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_waitCaptchaSolving" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.driver.set_window_position(int(target),int(value))
      # WebDriverWait(self.driver, 120).until(lambda x: x.find_element_by_css_selector('.antigate_solver.solved'))
      WebDriverWait(self.driver, 120).until(lambda x: x.find_element(By.CSS_SELECTOR, '.antigate_solver.solved'))
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT WAIT CAPTCHA. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
      
  #############################################
  ###  9.20 others_keyMouse_rightClick      ###
  #############################################
  def others_keyMouse_rightClick(self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_keyMouse_rightClick (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: The purpose of rightClick command in Selenium IDE, is to rightClick on any UI element in the application.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_keyMouse_rightClick" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      actions = ActionChains(self.driver)
      actions.context_click(element).perform()
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RIGHT CLICK. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #############################################
  ###  9.21 others_keyMouse_hotkeys         ###
  #############################################
  def others_keyMouse_hotkeys(self,target="",value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: others_keyMouse_hotkeys (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Gửi tổ hợp phím nóng.
    + Parameter:
      - target: Tổ hợp phím nóng (Chỉ cho phép là tổ hợp với các phím ctrl, shilf, alt, command, meta). Ex: "ctrl+c", "ctrl+alt+del".
      - value: None
      - description: Description will be printed out
    + Return: None
    + Example:
      - others_keyMouse_hotkeys("ctrl+c")
      - others_keyMouse_hotkeys("ctrl+alt+del")\n
    ================================================================='''
    #Print command and description
    commandName = "others_keyMouse_hotkeys" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      hotKeys = target.split('+')    
      actions = ActionChains(self.driver)
      
      #Action key down
      for key in hotKeys:
        if key=="ctrl"   : 
          actions.key_down(Keys.CONTROL)
          continue
        if key=="shilf"  : 
          actions.key_down(Keys.SHIFT)  
          continue
        if key=="alt"    : 
          actions.key_down(Keys.ALT)    
          continue
        if key=="command": 
          actions.key_down(Keys.COMMAND)
          continue
        if key=="meta"   : 
          actions.key_down(Keys.META)   
          continue
        actions.send_keys(key)
        
      #Action key up
      for key in hotKeys:
        if key=="ctrl"   : 
          actions.key_up(Keys.CONTROL)
          continue
        if key=="shilf"  : 
          actions.key_up(Keys.SHIFT)  
          continue
        if key=="alt"    : 
          actions.key_up(Keys.ALT)    
          continue
        if key=="command": 
          actions.key_up(Keys.COMMAND)
          continue
        if key=="meta"   : 
          actions.key_up(Keys.META)   
          continue

      actions.perform()
      self.reqWaitCmdFlg = True
      
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT RIGHT CLICK. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###############################################
  ###  9.22 others_content_getNumberOfIframes ###
  ###############################################
  def others_content_getNumberOfIframes(self,target="None",value="None" ,description="",printCmd=True):
    '''=================================================================
    + Name: others_content_getNumberofIframes
    + Function: Count current iframe in html code.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: Số lượng iframe\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_getNumberOfIframes" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      iframe = self.driver.find_elements(By.TAG_NAME, "iframe")
      return len(iframe)
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT GET NUMBER OF IFRAME. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###############################################
  ###  9.23 others_content_waitNewIframeOpen  ###
  ###############################################
  def others_content_waitNewIframeOpen(self,target=0 ,value=30000 ,description="",printCmd=True):
    '''=================================================================
    + Name: 🔃 others_content_waitNewIframeOpen
    + Function: Chờ một iframe mới được mở ra (VD: popup login Google)
    + Parameter:
      - target: Số lượng iframe trước khi đợi sự kiện (chạy bởi self.others_content_getNumberOfIframes) 
      - value: Nhập vào giá trị thời gian đơn vị ms.
      - description: Description will be printed out
    + Return: Tuple. (True/False,Số lượng iframe mới). True khi có iframe mới và False khi timeout.\n
    ================================================================='''
    value = 30000 if value == "" else value
    #Print command and description
    commandName = "others_content_waitNewIframeOpen" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    self.reqWaitCmdFlg = False
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      startIframeNum = int(target)
      timeoutSec = int(value)/1000
      end_time = time.time() + timeoutSec
      while True:
        endIframeNum = len(self.driver.find_elements(By.TAG_NAME,"iframe"))
        if endIframeNum > startIframeNum:
          return True,endIframeNum
        
        time.sleep(0.1)
        if time.time() > end_time:
          logger.error("TIMEOUT. CANNOT FIND NEW IFRAME!!!")
          LotusLib.addScreenCaptureToHtmlLog()
          return False,endIframeNum

    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT FIND NEW IFRAME. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  def others_content_getAttribute(self,target="" ,value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_getAttribute
    + Function: Lấy giá tri từ thuộc tính của thẻ.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: tên attribution. Ex: id, type, src,...
      - description: Description will be printed out
    + Return: Giá trị của attribution - Return None nếu đối tượng không tìm thấy.\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_getAttribute" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      if element == None: return None
      elementAttrValue = element.get_attribute(value)
      return elementAttrValue
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
    
  def others_content_getText(self,target="" ,value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_getText
    + Function: Lấy text() từ đối tượng.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: Giá trị của attribution - Return None nếu đối tượng không tìm thấy.\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_getText" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      print("DEBUG <<<<<<")
      print(element)
      if element == None: return None
      elementText = element.text
      return elementText
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("ASSERT FAIL. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
    
  
  ###############################################
  ###  9.24 others_debug_printTabIframeInfo   ###
  ###############################################
  def others_debug_printTabIframeInfo(self,target="" ,value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: others_debug_printTabIframeInfo
    + Function: In thông tin về tab và số iframe ra màn hình.
    + Parameter:
      - target: None
      - value: None
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_debug_printTabIframeInfo" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      main_handler = self.driver.current_window_handle
      print('-'*100)
      print('{n:<10}{i:<11}{h:<45}{t:<}'.format(dashes = '-'*100, n = 'TabIndex', i = 'IframeNum', h = 'Window handler',t = 'Tab Title'))
      print('-'*100)
      
      checkingTab = 0
      for handle in self.driver.window_handles:
        self.driver.switch_to.window(handle)
        iframeNum = len(self.driver.find_elements(By.TAG_NAME,"iframe"))
        if (handle == main_handler):
          if iframeNum == 0:
            iFrameNumStr = "0"
          else:
            iFrameNumStr = str(iframeNum) + " (Id:" + str(iframeNum - 1) + ")"
            
          print('{n:<10}{i:<11}{h:<45}{t:<}'.format(n = "=> "+str(checkingTab), i = iFrameNumStr, h=handle, t = self.driver.title))
        else:
          iFrameNumStr = "0"
          print('   {n:<7}{i:<11}{h:<45}{t:<}'.format(n = str(checkingTab), i = iFrameNumStr, h=handle, t = self.driver.title))
        checkingTab+=1
      self.driver.switch_to.window(main_handler)
      print('-'*100+'\n')

    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT PRINT DEBUG TAB/IFRAME TABLE. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###############################################
  ###  9.25 others_browser_scrollTo           ###
  ###############################################
  def others_browser_scrollTo(self,target="" ,value="" ,description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_scrollTo (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Scroll màn hình đến vị trí chỉ định
    + Parameter:
      - target: Vị trí X scroll đến.
      - value: Vị trí Y scroll đến.
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_scrollTo" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.runScript(("window.scrollTo("+str(target)+","+str(value)+")"))
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT SCROLL TO LOCATION. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###############################################
  ###  9.26 others_browser_scrollTo           ###
  ###############################################
  def others_browser_scrollToElement(self,element,description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_scrollToElement (⚠️🚨 Action command -> Next command is WaitFor type)
    + Function: Scroll màn hình đến vị trí element
    + Parameter:
      - element: Element cần scroll tới
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_scrollToElement" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"(Element)"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      self.runScript(("window.scrollTo("+str(element.location['x'])+","+str(element.location['y'])+")"))
      self.reqWaitCmdFlg = True
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT SCROLL TO ELEMENT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###############################################
  ###  9.27 others_browser_findChildElement   ###
  ###############################################
  def others_browser_findChildElement(self,element:WebElement,xpath,description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_scrollToElement
    + Function: Tìm đến element con của một element cha nào đó.
    + Parameter:
      - element: Element cha.
      - xpath: đường dẫn xpath.
      - description: Description will be printed out
    + Return:
      - True: element con được tìm thấy
      - False: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_scrollToElement" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"(Element,"+str(xpath)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if "xpath" in xpath:
        return element.find_element(By.XPATH,"./child::"+xpath[len("xpath="):])
      else:
        raise Exception(">>> TARGET PARAMETER MUST BE XPATH <<<")
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT FIND CHILD ELEMENT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ###############################################
  ###  9.28 others_browser_findChildElements  ###
  ###############################################
  def others_browser_findChildElements(self,element:WebElement,xpath,description="",printCmd=True):
    '''=================================================================
    + Name: others_browser_findChildElements
    + Function: Tìm đến các element con của một element cha nào đó.
    + Parameter:
      - element: Element cha.
      - xpath: đường dẫn xpath. EX: xpath="xpath=//div[@class='abc']"
      - description: Description will be printed out
    + Return:
      - True: List of all elements
      - False: None\n
    ================================================================='''
    #Print command and description
    commandName = "others_browser_findChildElements" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"(Element,"+str(xpath)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      if "xpath" in xpath:
        return element.find_elements(By.XPATH,"./child::"+xpath[len("xpath="):])
      else:
        raise Exception(">>> TARGET PARAMETER MUST BE XPATH <<<")
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("CANNOT FIND CHILD ELEMENT. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  #######################################################
  ### 9.29 others_debug_printComment                  ###
  #######################################################
  def others_debug_printComment(self,target="",value="",description="",printCmd=True):
    '''=================================================================
    + Name: others_debug_printComment
    + Function: In comment và xuống dòng.
    + Parameter:
      - target: Comment 1
      - value: Comment 2
      - description: Description will be printed out
    + Return: None\n
    ================================================================='''
    #Print command and description
    if printCmd == True:  self.commandNum += 1
    command = "<OTHER COMMAND:    {commandNum}> ".format(commandNum=self.commandNum)+target+value
    if printCmd == True: self.__printCmdDes(command,description)
    
  #######################################################
  ### 9.30 clearReqWaitCmdFlg                         ###
  #######################################################
  def clearReqWaitCmdFlg(self):
    '''=================================================================
    + Name: 🔃 clearReqWaitCmdFlg
    + Function: Xóa cờ self.reqWaitCmdFlg
    + Parameter: None
    + Return: None\n
    ================================================================='''
    self.reqWaitCmdFlg = False
  
  #######################################################
  ### 9.31 clearExitOnExceptionFlg                    ###
  #######################################################
  def clearExitOnExceptionFlg(self):
    '''=================================================================
    + Name: 🔃 clearExitOnExceptionFlg
    + Function: Xóa cờ self.exitOnExceptionFlg -> Chạy tiếp nếu gặp exception.
    + Parameter: None
    + Return: None\n
    ================================================================='''
    self.exitOnExceptionFlg = False
  
  #######################################################
  ### 9.32 setExitOnExceptionFlg                      ###
  #######################################################
  def setExitOnExceptionFlg(self):
    '''=================================================================
    + Name: 🔃 setExitOnExceptionFlg
    + Function: Set cờ self.exitOnExceptionFlg -> Exit nếu gặp exception.
    + Parameter: None
    + Return: None\n
    ================================================================='''
    self.exitOnExceptionFlg = True
  
  def others_content_getPosSizeElement (self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_getPosSizeElement
    + Function: Trả về vị trí bắt đầu và kích thước WxH của element.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: Dạng dict có các phần tử dạng int chứa {x,y,width,height}. Vị trí và kích thước của element.
    + Example: others_content_getPosSizeElement("id=slider_001")\n
    ✨ => {'x': 396, 'y': 21, 'width': 161, 'height': 19}\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_getPosSizeElement" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      # print(target)
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      posObj = element.rect #<--- Get element position and size
      return dict(x=int(posObj['x']),y=int(posObj['y']),width=int(posObj['width']),height=int(posObj['height']))
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  def others_content_getPosMidElement (self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_getPosMidElement
    + Function: Trả về vị trí trung tâm của element.
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: None
      - description: Description will be printed out
    + Return: Vị trí trung tâm [int(x),int(y)] của element.\n
    + Example: others_content_getPosMidElement("id=slider_001")\n
    ✨ => [396, 21]\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_getPosMidElement" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      # print(target)
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      posObj = element.rect #<--- Get element position and size
      return int(posObj["x"]+posObj["width"]/2),int(posObj["y"]+posObj["height"]/2) #<--- Get element position and size
    
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()

  def others_content_saveElementScreenshot (self,target="",value="" ,description="",printCmd=True, element:WebElement = None):
    '''=================================================================
    + Name: ☸️ others_content_saveElementScreenshot
    + Function: Chụp ảnh Element và lưu lại
    + Parameter:
      - target: Trỏ đến element. Có 8 kiểu xác định: xpath, tag, class, id, name, css, link text, partial link text.
              - EX1: xpath=//a[contains(@data-e2e,'tiktok-logo')]
              - EX2: tag=a, class=btn, id=btn, name=btn, css=btn, link text=btn,
      - value: Đường dẫn và tên file sẽ lưu
      - description: Description will be printed out
    + Return: Đường dẫn đến file được lưu.\n
    + Example: others_content_saveElementScreenshot("id=slider_001","/home/sliderPicture.png")\n
    ================================================================='''
    #Print command and description
    commandName = "others_content_saveElementScreenshot" #<--- FUNCTION NAME
    if printCmd == True:  self.commandNum += 1
    command = "<SELENIUM COMMAND: {commandNum}> ".format(commandNum=self.commandNum)+commandName+"("+str(target)+" , "+str(value)+")"
    if printCmd == True: self.__printCmdDes(command,description)
    
    if self.reqWaitCmdFlg == True:
      logger.fatal(">>>>> COMMAND WAIT IS REQUESTED. BUT THIS COMMAND IS NOT!!!")
      exit()
    
    #Function operation
    try:
      # print(target)
      if element == None:
        element = self.findElement(target)
      else:
        element = self.others_browser_findChildElement(element,target,"",False)
      element.screenshot(value) #<--- Get element position and size
      return value
    except Exception as e:
      logger.fatal("%s",e)
      logger.fatal("WRONG TARGET. PROGRAM STOPPED!!!")
      LotusLib.addScreenCaptureToHtmlLog()
      if self.exitOnExceptionFlg == True: exit()
  
  ############################################################################################
  ############################################################################################
  ############################################################################################
  def refreshBrowserTabNumOnly (self):
    self.browserTabNum = len(self.driver.window_handles)
    return self.browserTabNum

  def refreshBrowserTabInfo (self,backCurrentTab=True):
    self.browserTabList = []   #Clear Tab list
    self.browserTabHandle = [] #Clear Tab handle
    self.browserTabNum = 0     #Clear Tab Number
    main_handler = ""
    if backCurrentTab == True: main_handler = self.driver.current_window_handle

    for handle in self.driver.window_handles:
      self.driver.switch_to.window(handle)
      self.browserTabList.append(self.driver.title)
      self.browserTabHandle.append(handle)
    self.browserTabNum = len(self.browserTabList)
    if backCurrentTab == True: self.driver.switch_to.window(main_handler)

  def __replaceSpecialKeys(self,value=""):
    # print("BEFORE" + value)
    value = value.replace("${KEY_NULL}"                ,u'\ue000')
    value = value.replace("${KEY_CANCEL}"              ,u'\ue001') #BREAK
    value = value.replace("${KEY_HELP}"                ,u'\ue002')
    value = value.replace("${KEY_BACKSPACE}"           ,u'\ue003')
    value = value.replace("${KEY_BACK_SPACE}"          ,u'\ue003')
    value = value.replace("${KEY_TAB}"                 ,u'\ue004')
    value = value.replace("${KEY_CLEAR}"               ,u'\ue005')
    value = value.replace("${KEY_RETURN}"              ,u'\ue006')
    value = value.replace("${KEY_ENTER}"               ,u'\ue007')
    value = value.replace("${KEY_SHIFT}"               ,u'\ue008')
    value = value.replace("${KEY_LEFT_SHIFT}"          ,u'\ue008')
    value = value.replace("${KEY_CONTROL}"             ,u'\ue009')
    value = value.replace("${KEY_LEFT_CONTROL}"        ,u'\ue009')
    value = value.replace("${KEY_ALT}"                 ,u'\ue00a')
    value = value.replace("${KEY_LEFT_ALT}"            ,u'\ue00a')
    value = value.replace("${KEY_PAUSE}"               ,u'\ue00b')
    value = value.replace("${KEY_ESCAPE}"              ,u'\ue00c')
    value = value.replace("${KEY_SPACE}"               ,u'\ue00d')
    value = value.replace("${KEY_PAGE_UP}"             ,u'\ue00e')
    value = value.replace("${KEY_PAGE_DOWN}"           ,u'\ue00f')
    value = value.replace("${KEY_END}"                 ,u'\ue010')
    value = value.replace("${KEY_HOME}"                ,u'\ue011')
    value = value.replace("${KEY_LEFT}"                ,u'\ue012')
    value = value.replace("${KEY_ARROW_LEFT}"          ,u'\ue012')
    value = value.replace("${KEY_UP}"                  ,u'\ue013')
    value = value.replace("${KEY_ARROW_UP}"            ,u'\ue013')
    value = value.replace("${KEY_RIGHT}"               ,u'\ue014')
    value = value.replace("${KEY_ARROW_RIGHT}"         ,u'\ue014')
    value = value.replace("${KEY_DOWN}"                ,u'\ue015')
    value = value.replace("${KEY_ARROW_DOWN}"          ,u'\ue015')
    value = value.replace("${KEY_INSERT}"              ,u'\ue016')
    value = value.replace("${KEY_DELETE}"              ,u'\ue017')
    value = value.replace("${KEY_SEMICOLON}"           ,u'\ue018')
    value = value.replace("${KEY_EQUALS}"              ,u'\ue019')
    value = value.replace("${KEY_NUMPAD0}"             ,u'\ue01a') # Keypad  keys
    value = value.replace("${KEY_NUMPAD1}"             ,u'\ue01b')
    value = value.replace("${KEY_NUMPAD2}"             ,u'\ue01c')
    value = value.replace("${KEY_NUMPAD3}"             ,u'\ue01d')
    value = value.replace("${KEY_NUMPAD4}"             ,u'\ue01e')
    value = value.replace("${KEY_NUMPAD5}"             ,u'\ue01f')
    value = value.replace("${KEY_NUMPAD6}"             ,u'\ue020')
    value = value.replace("${KEY_NUMPAD7}"             ,u'\ue021')
    value = value.replace("${KEY_NUMPAD8}"             ,u'\ue022')
    value = value.replace("${KEY_NUMPAD9}"             ,u'\ue023')
    value = value.replace("${KEY_MULTIPLY}"            ,u'\ue024')
    value = value.replace("${KEY_ADD}"                 ,u'\ue025')
    value = value.replace("${KEY_SEPARATOR}"           ,u'\ue026')
    value = value.replace("${KEY_SUBTRACT}"            ,u'\ue027')
    value = value.replace("${KEY_DECIMAL}"             ,u'\ue028')
    value = value.replace("${KEY_DIVIDE}"              ,u'\ue029')
    value = value.replace("${KEY_F1}"                  ,u'\ue031') # function  keys
    value = value.replace("${KEY_F2}"                  ,u'\ue032')
    value = value.replace("${KEY_F3}"                  ,u'\ue033')
    value = value.replace("${KEY_F4}"                  ,u'\ue034')
    value = value.replace("${KEY_F5}"                  ,u'\ue035')
    value = value.replace("${KEY_F6}"                  ,u'\ue036')
    value = value.replace("${KEY_F7}"                  ,u'\ue037')
    value = value.replace("${KEY_F8}"                  ,u'\ue038')
    value = value.replace("${KEY_F9}"                  ,u'\ue039')
    value = value.replace("${KEY_F10}"                 ,u'\ue03a')
    value = value.replace("${KEY_F11}"                 ,u'\ue03b')
    value = value.replace("${KEY_F12}"                 ,u'\ue03c')
    value = value.replace("${KEY_META}"                ,u'\ue03d')
    value = value.replace("${KEY_COMMAND}"             ,u'\ue03d')
    # print("AFTER" + value)
    return value
  
  def __waitForElementPresent(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.XPATH            ,target[len("xpath=")      :])))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.TAG_NAME         ,target[len("tag=")        :])))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.CLASS_NAME       ,target[len("class=")      :])))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.ID               ,target[len("id=")         :])))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.NAME             ,target[len("name=")       :])))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.CSS_SELECTOR     ,target[len("css=")        :])))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.LINK_TEXT        ,target[len("link=")       :])))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(value)/1000).until(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :])))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def __waitForElementNotPresent(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.XPATH            ,target[len("xpath=")      :])))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.TAG_NAME         ,target[len("tag=")        :])))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.CLASS_NAME       ,target[len("class=")      :])))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.ID               ,target[len("id=")         :])))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.NAME             ,target[len("name=")       :])))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.CSS_SELECTOR     ,target[len("css=")        :])))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.LINK_TEXT        ,target[len("link=")       :])))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(value)/1000).until_not(EC.presence_of_element_located((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :])))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def __waitForElementVisible(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.XPATH            ,target[len("xpath=")      :])))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.TAG_NAME         ,target[len("tag=")        :])))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.CLASS_NAME       ,target[len("class=")      :])))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.ID               ,target[len("id=")         :])))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.NAME             ,target[len("name=")       :])))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.CSS_SELECTOR     ,target[len("css=")        :])))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.LINK_TEXT        ,target[len("link=")       :])))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(value)/1000).until(EC.visibility_of_element_located((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :])))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def __waitForElementNotVisible(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.XPATH            ,target[len("xpath=")      :])))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.TAG_NAME         ,target[len("tag=")        :])))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.CLASS_NAME       ,target[len("class=")      :])))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.ID               ,target[len("id=")         :])))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.NAME             ,target[len("name=")       :])))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.CSS_SELECTOR     ,target[len("css=")        :])))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.LINK_TEXT        ,target[len("link=")       :])))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(value)/1000).until_not(EC.visibility_of_element_located((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :])))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def __waitForElementEditable(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.XPATH            ,target[len("xpath=")      :])))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.TAG_NAME         ,target[len("tag=")        :])))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.CLASS_NAME       ,target[len("class=")      :])))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.ID               ,target[len("id=")         :])))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.NAME             ,target[len("name=")       :])))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.CSS_SELECTOR     ,target[len("css=")        :])))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.LINK_TEXT        ,target[len("link=")       :])))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(value)/1000).until(EC.element_to_be_clickable((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :])))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def __waitForElementNotEditable(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.XPATH            ,target[len("xpath=")      :])))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.TAG_NAME         ,target[len("tag=")        :])))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.CLASS_NAME       ,target[len("class=")      :])))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.ID               ,target[len("id=")         :])))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.NAME             ,target[len("name=")       :])))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.CSS_SELECTOR     ,target[len("css=")        :])))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.LINK_TEXT        ,target[len("link=")       :])))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(value)/1000).until_not(EC.element_to_be_clickable((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :])))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'

  def __waitForText(self,target="",value=""):
    if target.startswith("xpath="):         return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.XPATH            ,target[len("xpath=")      :]),value))
    if target.startswith("tag="):           return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.TAG_NAME         ,target[len("tag=")        :]),value))
    if target.startswith("class="):         return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.CLASS_NAME       ,target[len("class=")      :]),value))
    if target.startswith("id="):            return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.ID               ,target[len("id=")         :]),value))
    if target.startswith("name="):          return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.NAME             ,target[len("name=")       :]),value))
    if target.startswith("css="):           return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.CSS_SELECTOR     ,target[len("css=")        :]),value))
    if target.startswith("link="):          return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.LINK_TEXT        ,target[len("link=")       :]),value))
    if target.startswith("partLink="):      return WebDriverWait(self.driver,float(self.defaultWaitTimeMs)/1000).until(EC.text_to_be_present_in_element((By.PARTIAL_LINK_TEXT,target[len("partLink=")   :]),value))
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def findElement (self,target=""):
    if target.startswith("xpath="):    return self.driver.find_element(By.XPATH            ,target[len("xpath="):]   )
    if target.startswith("tag="):      return self.driver.find_element(By.TAG_NAME         ,target[len("tag="):]     )
    if target.startswith("class="):    return self.driver.find_element(By.CLASS_NAME       ,target[len("class="):]   )
    if target.startswith("id="):       return self.driver.find_element(By.ID               ,target[len("id="):]      )
    if target.startswith("name="):     return self.driver.find_element(By.NAME             ,target[len("name="):]    )
    if target.startswith("css="):      return self.driver.find_element(By.CSS_SELECTOR     ,target[len("css="):]     )
    if target.startswith("link="):     return self.driver.find_element(By.LINK_TEXT        ,target[len("link="):]    )
    if target.startswith("partLink="): return self.driver.find_element(By.PARTIAL_LINK_TEXT,target[len("partLink="):])
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'

  def findElements (self,target=""):
    if target.startswith("xpath="):    return self.driver.find_elements(By.XPATH            ,target[len("xpath="):]   )
    if target.startswith("tag="):      return self.driver.find_elements(By.TAG_NAME         ,target[len("tag="):]     )
    if target.startswith("class="):    return self.driver.find_elements(By.CLASS_NAME       ,target[len("class="):]   )
    if target.startswith("id="):       return self.driver.find_elements(By.ID               ,target[len("id="):]      )
    if target.startswith("name="):     return self.driver.find_elements(By.NAME             ,target[len("name="):]    )
    if target.startswith("css="):      return self.driver.find_elements(By.CSS_SELECTOR     ,target[len("css="):]     )
    if target.startswith("link="):     return self.driver.find_elements(By.LINK_TEXT        ,target[len("link="):]    )
    if target.startswith("partLink="): return self.driver.find_elements(By.PARTIAL_LINK_TEXT,target[len("partLink="):])
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'

  def findDedicatedElement (self,element:WebElement = None,target=""):
    if target.startswith("xpath="):    return element.find_element(By.XPATH            ,target[len("xpath="):]   )
    if target.startswith("tag="):      return element.find_element(By.TAG_NAME         ,target[len("tag="):]     )
    if target.startswith("class="):    return element.find_element(By.CLASS_NAME       ,target[len("class="):]   )
    if target.startswith("id="):       return element.find_element(By.ID               ,target[len("id="):]      )
    if target.startswith("name="):     return element.find_element(By.NAME             ,target[len("name="):]    )
    if target.startswith("css="):      return element.find_element(By.CSS_SELECTOR     ,target[len("css="):]     )
    if target.startswith("link="):     return element.find_element(By.LINK_TEXT        ,target[len("link="):]    )
    if target.startswith("partLink="): return element.find_element(By.PARTIAL_LINK_TEXT,target[len("partLink="):])
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'

  def findDedicatedElements (self,element:WebElement = None,target=""):
    if target.startswith("xpath="):    return element.find_elements(By.XPATH            ,target[len("xpath="):]   )
    if target.startswith("tag="):      return element.find_elements(By.TAG_NAME         ,target[len("tag="):]     )
    if target.startswith("class="):    return element.find_elements(By.CLASS_NAME       ,target[len("class="):]   )
    if target.startswith("id="):       return element.find_elements(By.ID               ,target[len("id="):]      )
    if target.startswith("name="):     return element.find_elements(By.NAME             ,target[len("name="):]    )
    if target.startswith("css="):      return element.find_elements(By.CSS_SELECTOR     ,target[len("css="):]     )
    if target.startswith("link="):     return element.find_elements(By.LINK_TEXT        ,target[len("link="):]    )
    if target.startswith("partLink="): return element.find_elements(By.PARTIAL_LINK_TEXT,target[len("partLink="):])
    logger.error("DON'T SUPPORT YOUR TYPE OF TARGET")
    raise ValueError  # shorthand for 'raise ValueError()'
  
  def __printCmdDes (self,command="",description="",printCmd=True):
    if description != "": description = "//"+description
    if self.printOutEna == True and self.printOutLevel == "Fatal"   : logger.fatal("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "Error"   : logger.error("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "Warn"    : logger.warn ("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "Info"    : logger.info ("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "Debug"   : logger.debug("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "Trace"   : logger.trace("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "Terminal": print ("%s %s",command,description)
    if self.printOutEna == True and self.printOutLevel == "NoPrint" : return
    
  def __shiftInputValue (self,element,target,value,description,printCmd):
    if type(element) != WebElement:
      returnElement     = None
      returnTarget      = element
      returnValue       = target
      returnDescription = value
      returnPrintCmd    = description
    else:
      returnElement     = element
      returnTarget      = target
      returnValue       = value
      returnDescription = description
      returnPrintCmd    = printCmd
   
    print(returnElement)
    print(returnTarget)
    print(returnValue)
    print(returnDescription)
    print(returnPrintCmd)
    return returnElement,returnTarget,returnValue,returnDescription,returnPrintCmd
      
